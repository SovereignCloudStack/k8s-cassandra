name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: engineerd/setup-kind@v0.4.0
      with:
        version: v0.8.1
    - name: Setup fluxctl # Following steps are based on fluxctl-action docs
      uses: fluxcd/fluxctl-action@v1.19.0
    - name: Install Flux
      run: |
        kubectl create ns flux
        fluxctl install \
        --git-path=envs/ci-testing \
        --git-branch=${GITHUB_REF#refs/heads/} \
        --git-readonly=true \
        --registry-disable-scanning=true \
        --git-email=invalid@scs.community \
        --git-url=https://github.com/$GITHUB_REPOSITORY.git \
        --manifest-generation=true \
        --namespace=flux | kubectl apply -f -
    - name: Verify install
      run: kubectl -n flux rollout status deploy/flux --timeout=1m
    - name: Sync git with cluster
      env:
        FLUX_FORWARD_NAMESPACE: flux
      run: fluxctl sync
    - name: Wait for service to be Ready
      run: |
        until [[ $(kubectl get clusters.scylla.scylladb.com scylla-cluster '--output=go-template={{index .status "racks" "default-1" "readyMembers"}}') = "1" ]]
        do
          sleep 1
        done
    - name: Check if service is working as expected
      run: |
        kubectl run -i --restart=Never health-check --rm --image=python:3 --command -- sh -c 'pip install cassandra-driver && python' <<EOF
        from cassandra.cluster import Cluster
        import json
        
        cluster = Cluster(['scylla-cluster-client'])
        session = cluster.connect()
        
        session.execute("CREATE KEYSPACE IF NOT EXISTS integrationtest WITH REPLICATION={'class': 'NetworkTopologyStrategy', 'default': 1};")
        session.execute('USE integrationtest;')
        session.execute('CREATE TABLE IF NOT EXISTS example_data (id int PRIMARY KEY, data text);')
        
        session.execute("INSERT INTO example_data (id, data) VALUES (1, 'this is the 1st data');")
        session.execute("INSERT INTO example_data (id, data) VALUES (2, 'this is the 2nd data');")
        
        resp = session.execute("SELECT * FROM example_data;")
        
        assert json.dumps(resp.current_rows) == '[[1, "this is not the 1st data"], [2, "this is the 2nd data"]]'
        EOF
    - name: Fetch fluxcd logs
      if: ${{ always() }}
      run: kubectl logs -n flux deploy/flux
